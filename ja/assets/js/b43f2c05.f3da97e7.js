"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[179],{9613:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>h});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(r),h=n,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return r?a.createElement(d,i(i({ref:t},m),{},{components:r})):a.createElement(d,i({ref:t},m))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6475:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(2962),n=(r(9496),r(9613));const o={title:"Rome Tools"},i=void 0,s={permalink:"/javascript-parser-in-rust/ja/blog/rome",editUrl:"https://github.com/Boshen/javascript-parser-in-rust/tree/main/blog/blog/rome.md",source:"@site/blog/rome.md",title:"Rome Tools",description:"Rome uses a different set of techniques for parsing JavaScript and TypeScript.",date:"2023-07-22T08:24:06.000Z",formattedDate:"2023\u5e747\u670822\u65e5",tags:[],readingTime:2.07,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Rome Tools"},nextItem:{title:"Grammar",permalink:"/javascript-parser-in-rust/ja/blog/grammar"}},l={authorsImageUrls:[]},p=[{value:"History",id:"history",level:2},{value:"Concrete Syntax Tree",id:"concrete-syntax-tree",level:2},{value:"Grammar",id:"grammar",level:2},{value:"Entry Point",id:"entry-point",level:2},{value:"Contributing",id:"contributing",level:2}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/rome/tools"},"Rome")," uses a different set of techniques for parsing JavaScript and TypeScript.\nThis tutorial summarizes them in learning order for better understanding."),(0,n.kt)("h2",{id:"history"},"History"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The Rome codebase was rewritten from TypeScript to Rust, see ",(0,n.kt)("a",{parentName:"li",href:"https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust"},"Rome will be rewritten in Rust")),(0,n.kt)("li",{parentName:"ul"},"The decision was made after talking to the author of ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rslint/rslint"},"rslint")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rust-lang/rust-analyzer"},"rust-analyzer")),(0,n.kt)("li",{parentName:"ul"},"rust-analyzer proved that IDE-centric tools built around concrete syntax tree are possible"),(0,n.kt)("li",{parentName:"ul"},"rslint proved that it is possible to write a JavaScript parser in Rust, with the same base libraries as rust-analyzer"),(0,n.kt)("li",{parentName:"ul"},"Rome ported the rslint codebase to their own repo with permission from rslint's author")),(0,n.kt)("h2",{id:"concrete-syntax-tree"},"Concrete Syntax Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The base library is called ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rust-analyzer/rowan"},"rowan"),", see ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/syntax.md"},"overview of rowan")),(0,n.kt)("li",{parentName:"ul"},"Rowan, also known as red-green trees, is named after the real green ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Rowan"},"rowan tree")," that makes red berries"),(0,n.kt)("li",{parentName:"ul"},"The origin of red-green trees is described in this ",(0,n.kt)("a",{parentName:"li",href:"https://ericlippert.com/2012/06/08/red-green-trees/"},"blog post"),", by the authors of the C# programming language"),(0,n.kt)("li",{parentName:"ul"},"The whole point of rowan is to define a lossless concrete syntax tree (CST) that describes all the details of the source code and provides a set of traversal APIs (parent, children, siblings, etc)"),(0,n.kt)("li",{parentName:"ul"},"Read the advantage of having a CST over an AST: ",(0,n.kt)("a",{parentName:"li",href:"https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html"},"Pure AST based linting sucks")),(0,n.kt)("li",{parentName:"ul"},"CST provides the ability to build a fully recoverable parser")),(0,n.kt)("h2",{id:"grammar"},"Grammar"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Just like an AST, we need to define the grammar. The grammar is auto-generated by using ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/tree/main/xtask/codegen"},"xtask/codegen")),(0,n.kt)("li",{parentName:"ul"},"The grammar is generated from the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rust-analyzer/ungrammar"},"ungrammar")," DSL"),(0,n.kt)("li",{parentName:"ul"},"The input ",(0,n.kt)("inlineCode",{parentName:"li"},"ungrammar")," source file is in ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/blob/main/xtask/codegen/js.ungram"},"xtask/codegen/js.ungram")),(0,n.kt)("li",{parentName:"ul"},"The output of the codegen is in ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/tree/main/crates/rome_js_syntax/src/generated"},"rome_js_syntax/src/generated"))),(0,n.kt)("h2",{id:"entry-point"},"Entry Point"),(0,n.kt)("p",null,"The Rome codebase is getting large and slightly difficult to find the parser entry point."),(0,n.kt)("p",null,"For first-time contributors, the ",(0,n.kt)("inlineCode",{parentName:"p"},"rome_cli")," crate is the binary entry point for running the code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run -p rome_cli\n\ntouch test.js\ncargo run -p rome_cli -- check ./test.js\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"rome_cli")," will eventually call ",(0,n.kt)("inlineCode",{parentName:"p"},"rome_js_parser::parse")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/parse.rs#L178-L187\n")),(0,n.kt)("p",null,"and finally the actual parsing code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/syntax/program.rs#L14-L17\n")),(0,n.kt)("h2",{id:"contributing"},"Contributing"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/blob/main/CONTRIBUTING.md"},"CONTRIBUTING.md")," has instructions on how to contribute"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://rome.github.io/tools/rome_js_parser/index.html"},"rome_js_parser crate doc")," has some more details on the parser"),(0,n.kt)("li",{parentName:"ul"},"See ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/tree/main/xtask/codegen#cargo-codegen-test"},(0,n.kt)("inlineCode",{parentName:"a"},"cargo codegen test"))," for working with parser tests"),(0,n.kt)("li",{parentName:"ul"},"See ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/rome/tools/tree/main/xtask/coverage"},(0,n.kt)("inlineCode",{parentName:"a"},"cargo coverage"))," for working with conformance tests"),(0,n.kt)("li",{parentName:"ul"},"Join the ",(0,n.kt)("a",{parentName:"li",href:"https://discord.com/invite/rome"},"Discord Server")," for inquiries")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The JavaScript / TypeScript parser is 99% complete, the best way to help is to test Rome in your own codebases\nor take a look at the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rome/tools/issues"},"issues on Github"),".")))}c.isMDXComponent=!0}}]);