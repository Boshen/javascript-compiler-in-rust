"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[53],{1109:r=>{r.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"\u306f\u3058\u3081\u306b","href":"/javascript-parser-in-rust/ja/docs/intro","docId":"intro"},{"type":"link","label":"\u6982\u8981","href":"/javascript-parser-in-rust/ja/docs/overview","docId":"overview"},{"type":"link","label":"\u5b57\u53e5\u89e3\u6790\u5668","href":"/javascript-parser-in-rust/ja/docs/lexer","docId":"lexer"},{"type":"link","label":"Abstract Syntax Tree","href":"/javascript-parser-in-rust/ja/docs/ast","docId":"ast"},{"type":"link","label":"Parser","href":"/javascript-parser-in-rust/ja/docs/parser","docId":"parser"},{"type":"link","label":"Dealing with Errors","href":"/javascript-parser-in-rust/ja/docs/errors","docId":"errors"},{"type":"link","label":"Semantic Analysis","href":"/javascript-parser-in-rust/ja/docs/semantics_analysis","docId":"semantics_analysis"},{"type":"link","label":"TypeScript","href":"/javascript-parser-in-rust/ja/docs/typescript","docId":"typescript"},{"type":"link","label":"\u53c2\u8003\u6587\u732e","href":"/javascript-parser-in-rust/ja/docs/references","docId":"references"}]},"docs":{"ast":{"id":"ast","title":"Abstract Syntax Tree","description":"The parser in the upcoming chapter is responsible for turning Tokens into an abstract syntax tree (AST).","sidebar":"tutorialSidebar"},"errors":{"id":"errors","title":"Dealing with Errors","description":"Quoting from the Dragon Book","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"\u306f\u3058\u3081\u306b","description":"\u79c1\u305f\u3061\u306fJavaScript \u306e\u7b2c 3 \u306e\u6642\u4ee3\u306b\u3044\u3066\u3001\u6628\u4eca\u306e\u4e00\u822c\u7684\u306a\u50be\u5411\u3068\u3057\u3066 JavaScript \u306e\u30c4\u30fc\u30eb\u3092 Rust \u3084 Go \u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u3092\u56f3\u308b\u30c8\u30ec\u30f3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002","sidebar":"tutorialSidebar"},"lexer":{"id":"lexer","title":"\u5b57\u53e5\u89e3\u6790\u5668","description":"\u30c8\u30fc\u30af\u30f3","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"\u6982\u8981","description":"\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u6a19\u6e96\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u5de5\u7a0b\u304c\u7528\u3044\u3089\u308c\u307e\u3059\u3002","sidebar":"tutorialSidebar"},"parser":{"id":"parser","title":"Parser","description":"The parser we are going to construct is called a recursive descent parser,","sidebar":"tutorialSidebar"},"references":{"id":"references","title":"\u53c2\u8003\u6587\u732e","description":"\u30d1\u30fc\u30b5\u30fc (\u968f\u6642\u66f4\u65b0\u4e2d)","sidebar":"tutorialSidebar"},"semantics_analysis":{"id":"semantics_analysis","title":"Semantic Analysis","description":"Semantic analysis is the process of checking whether our source code is correct or not.","sidebar":"tutorialSidebar"},"typescript":{"id":"typescript","title":"TypeScript","description":"So you are done with JavaScript and you want to challenge parsing TypeScript?","sidebar":"tutorialSidebar"}}}')}}]);