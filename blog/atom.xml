<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://boshen.github.io/javascript-compiler-in-rust/blog</id>
    <title>Write a JavaScript Compiler in Rust Blog</title>
    <updated>2022-08-12T05:53:49.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://boshen.github.io/javascript-compiler-in-rust/blog"/>
    <subtitle>Write a JavaScript Compiler in Rust Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[The ECMAScript Specification]]></title>
        <id>/ecma-spec</id>
        <link href="https://boshen.github.io/javascript-compiler-in-rust/blog/ecma-spec"/>
        <updated>2022-08-12T05:53:49.000Z</updated>
        <summary type="html"><![CDATA[The ECMAScript® 2023 Language Specification details everything about the JavaScript language, so anyone can implement their own JavaScript engine.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreferrer">The ECMAScript® 2023 Language Specification</a> details everything about the JavaScript language, so anyone can implement their own JavaScript engine.</p><p>For our compiler, we will study the following chapters:</p><ul><li>Chapter 5 Notational Conventions</li><li>Chapter 11 ECMAScript Language: Source Text</li><li>Chapter 12 ECMAScript Language: Lexical Grammar</li><li>Chapter 13 - 16 Expressions, Statements, Functions, Classes, Scripts and Modules</li><li>Chapter B Additional ECMAScript Features for Web Browsers</li><li>Chapter C The Strict Mode of ECMAScript</li></ul><h2 class="anchor anchorWithStickyNavbar_S230" id="chapter-5-notational-conventions">Chapter 5 Notational Conventions<a class="hash-link" href="#chapter-5-notational-conventions" title="Direct link to heading">​</a></h2><p><a href="https://tc39.es/ecma262/#sec-grammar-notation" target="_blank" rel="noopener noreferrer">Chapter 5.1.5 Grammar Notation</a> is the section you need to read.</p><p>The things to note here are:</p><p><strong>Recursion</strong></p><p>This is how lists are presented in the grammar.</p><div class="language-markup codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-markup codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ArgumentList :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  AssignmentExpression</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ArgumentList , AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>means</p><div class="language-javascript codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-javascript codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> c </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">^</span><span class="token plain">_____________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token operator">^</span><span class="token plain">__________</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">ArgumentList</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token operator">^</span><span class="token plain">___</span><span class="token operator">^</span><span class="token plain"> </span><span class="token maybe-class-name">AssignmentExpression</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Optional</strong>
The <code>_opt_</code> suffix for optional syntax. For example,</p><div class="language-markup codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-markup codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">VariableDeclaration :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  BindingIdentifier Initializer_opt</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>means</p><div class="language-javascript codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-javascript codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> binding_identifier </span><span class="token operator">=</span><span class="token plain"> </span><span class="token maybe-class-name">Initializer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                       ______________ </span><span class="token maybe-class-name">Initializer_opt</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Parameters</strong></p><p>The <code>[Return]</code> and <code>[In]</code> are parameters of the grammar.</p><p>For example</p><div class="language-markdup codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-markdup codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ScriptBody :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    StatementList[~Yield, ~Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>means top-level yield, await and return are not allowed in scripts, but</p><div class="language-markdup codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-markdup codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ModuleItem :</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ImportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ExportDeclaration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  StatementListItem[~Yield, +Await, ~Return]</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>allows for top-level return.</p><h2 class="anchor anchorWithStickyNavbar_S230" id="chapter-11-ecmascript-language-source-text">Chapter 11 ECMAScript Language: Source Text<a class="hash-link" href="#chapter-11-ecmascript-language-source-text" title="Direct link to heading">​</a></h2><p><a href="https://tc39.es/ecma262/#sec-types-of-source-code" target="_blank" rel="noopener noreferrer">Chapter 11.2 Types of Source Code</a> tells us that
there is a huge distinction between script code and module code.
And there is a <code>use strict</code> mode that makes the grammar saner by disallowing old JavaScript behaviors.</p><p><strong>Script Code</strong> is not strict, <code>use strict</code> need to be inserted at the top of the file to make script code strict.
In html you write <code>&lt;script src="javascript.js"&gt;&lt;/script&gt;</code>.</p><p><strong>Module Code</strong> is automatically strict.
In html you write <code>&lt;script type="module" src="main.mjs"&gt;&lt;/script&gt;</code>.</p><h2 class="anchor anchorWithStickyNavbar_S230" id="chapter-12-ecmascript-language-lexical-grammar">Chapter 12 ECMAScript Language: Lexical Grammar<a class="hash-link" href="#chapter-12-ecmascript-language-lexical-grammar" title="Direct link to heading">​</a></h2><p>For more in-depth explanation, you can read the V8 blog on <a href="https://v8.dev/blog/understanding-ecmascript-part-3" target="_blank" rel="noopener noreferrer">Understanding the ECMAScript spec</a>.</p><h3 class="anchor anchorWithStickyNavbar_S230" id="chapter-129-automatic-semicolon-insertion"><a href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener noreferrer">Chapter 12.9 Automatic Semicolon Insertion</a><a class="hash-link" href="#chapter-129-automatic-semicolon-insertion" title="Direct link to heading">​</a></h3><p>This section describes all the rules that you need can omit a semicolon while writing JavaScript.
All the explanation boils down to</p><div class="language-rust codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-rust codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">eat</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">prev_node_end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">..</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">SyntaxError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">AutoSemicolonInsertion</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">into</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">can_insert_semicolon</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_token</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">is_on_new_line </span><span class="token operator">||</span><span class="token plain"> </span><span class="token macro property">matches!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">cur_kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">RCurly</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Eof</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and in parser code</p><div class="language-rust codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-rust codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">parse_debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&amp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Statement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol" style="color:rgb(248, 248, 242)">'a</span><span class="token operator">&gt;&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> node </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">start_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">expect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Kind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token class-name">Debugger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">asi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ast</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">debugger_statement</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">finish_node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-info alert alert--info admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_EVia"><p>This section on asi is written with a parser in mind,
it explicitly states that the source text is parsed from left to right,
which makes it almost impossible to write the parser in any other way.
The author of jsparagus made a rant about this <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md#automatic-semicolon-insertion-" target="_blank" rel="noopener noreferrer">here</a>.</p><blockquote><p>The specification for this feature is both very-high-level and weirdly procedural (“When, as the source text is parsed from left to right, a token is encountered...”, as if the specification is telling a story about a browser. As far as I know, this is the only place in the spec where anything is assumed or implied about the internal implementation details of parsing.) But it would be hard to specify ASI any other way.</p></blockquote></div></div><h2 class="anchor anchorWithStickyNavbar_S230" id="chapter-13---16-expressions-statements-functions-classes-scripts-and-modules">Chapter 13 - 16 Expressions, Statements, Functions, Classes, Scripts and Modules<a class="hash-link" href="#chapter-13---16-expressions-statements-functions-classes-scripts-and-modules" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_S230" id="identifiers">Identifiers<a class="hash-link" href="#identifiers" title="Direct link to heading">​</a></h3><p>Distinguish between an identifier reference and binding identifier.</p><h3 class="anchor anchorWithStickyNavbar_S230" id="expressions">Expressions<a class="hash-link" href="#expressions" title="Direct link to heading">​</a></h3><p>Pratt parsing.</p><h3 class="anchor anchorWithStickyNavbar_S230" id="parenthesized-expression">Parenthesized Expression<a class="hash-link" href="#parenthesized-expression" title="Direct link to heading">​</a></h3><p>Meaningless expect this one litter corner ... <a href="https://github.com/estree/estree/issues/194" target="_blank" rel="noopener noreferrer">https://github.com/estree/estree/issues/194</a></p><h3 class="anchor anchorWithStickyNavbar_S230" id="cover-grammar">Cover Grammar<a class="hash-link" href="#cover-grammar" title="Direct link to heading">​</a></h3><p>Cover grammar will be your first painful experience while understanding JavaScript from a parser point of view.
Read the <a href="https://v8.dev/blog/understanding-ecmascript-part-4" target="_blank" rel="noopener noreferrer">intro V8 blog post</a> on this topic first,
and I'll cover this in <a href="/javascript-compiler-in-rust/blog/grammar">this tutorial</a>.</p><h3 class="anchor anchorWithStickyNavbar_S230" id="restricted-productions">Restricted Productions<a class="hash-link" href="#restricted-productions" title="Direct link to heading">​</a></h3><p>Parse <code>/</code> and templates.</p><h3 class="anchor anchorWithStickyNavbar_S230" id="arrow-functions">Arrow functions<a class="hash-link" href="#arrow-functions" title="Direct link to heading">​</a></h3>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Grammar]]></title>
        <id>/grammar</id>
        <link href="https://boshen.github.io/javascript-compiler-in-rust/blog/grammar"/>
        <updated>2022-08-12T05:53:49.000Z</updated>
        <summary type="html"><![CDATA[LL(1) Grammar]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_S230" id="ll1-grammar">LL(1) Grammar<a class="hash-link" href="#ll1-grammar" title="Direct link to heading">​</a></h2><p>According to wikipedia,</p><blockquote><p>an LL grammar is a context-free grammar that can be parsed by an LL parser, which parses the input from Left to right</p></blockquote><p>The first <strong>L</strong> means the scanning the source from <strong>L</strong>eft to right,
and the second <strong>L</strong> means the construction of a <strong>L</strong>eftmost derivation tree.</p><p>Context-free and the (1) in LL(1) means a tree can be constructed by just peeking at the next token and nothing else.</p><p>LL Grammars are of particular interest in academia because we are lazy human beings and we want to write programs that generate parsers automatically so we don't need to write parsers by hand.</p><p>Unfortunately most industrial programming languages do not have a nice LL(1) grammar,
and this applies to JavaScript too.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_EVia"><p>Mozilla started the <a href="https://github.com/mozilla-spidermonkey/jsparagus" target="_blank" rel="noopener noreferrer">jsparagus</a> project a few years ago,
and wrote a <a href="https://github.com/mozilla-spidermonkey/jsparagus/tree/master/jsparagus" target="_blank" rel="noopener noreferrer">LALR parser generator in Python</a>.
They haven't updated it much in the past two years and they sent a strong message at the end of <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/master/js-quirks.md" target="_blank" rel="noopener noreferrer">js-quirks.md</a></p><blockquote><p>What have we learned today?</p><ul><li>Do not write a JS parser.</li><li>JavaScript has some syntactic horrors in it. But hey, you don't make the world's most widely used programming language by avoiding all mistakes. You do it by shipping a serviceable tool, in the right circumstances, for the right users.</li></ul></blockquote></div></div><hr><p>What we have learned so far is that a JavaScript parser can only be written by hand,
so let's learn all the quirks in the grammar before we shoot ourselves in the foot.</p><p>The list below starts simple and will become difficult to grasp,
so please take your time.</p><h2 class="anchor anchorWithStickyNavbar_S230" id="class-and-strict-mode">Class and strict mode<a class="hash-link" href="#class-and-strict-mode" title="Direct link to heading">​</a></h2><p>class is strict, but there is not scope ...</p><h2 class="anchor anchorWithStickyNavbar_S230" id="legacy-octal-and-use-strict">Legacy Octal and Use Strict<a class="hash-link" href="#legacy-octal-and-use-strict" title="Direct link to heading">​</a></h2><div class="language-javascript codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-javascript codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token string" style="color:rgb(255, 121, 198)">"\01"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">"use strict"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>is syntax error</p><h2 class="anchor anchorWithStickyNavbar_S230" id="es2016-non-simple-parameter-argument-and-strict-mode">ES2016 non-simple parameter argument and strict mode<a class="hash-link" href="#es2016-non-simple-parameter-argument-and-strict-mode" title="Direct link to heading">​</a></h2><div class="language-javascript codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-javascript codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'use strict'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>is syntax error</p><p>but ... if you are writing a transpiler, e.g. TypeScript, this is not syntax if you are targeting es5.</p><h2 class="anchor anchorWithStickyNavbar_S230" id="functiondeclarations-in-ifstatement-statement-clauses">FunctionDeclarations in IfStatement Statement Clauses<a class="hash-link" href="#functiondeclarations-in-ifstatement-statement-clauses" title="Direct link to heading">​</a></h2><p><a href="https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses" target="_blank" rel="noopener noreferrer">B.3.3 FunctionDeclarations in IfStatement Statement Clauses</a></p><p>we need FunctionDeclarations in Statement ...</p><h3 class="anchor anchorWithStickyNavbar_S230" id="label-statement-is-legit">Label statement is legit<a class="hash-link" href="#label-statement-is-legit" title="Direct link to heading">​</a></h3><div class="codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-text codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#F8F8F2"><span class="token plain">const foo =&gt; { foo: bar }</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>is legit</p><h2 class="anchor anchorWithStickyNavbar_S230" id="let-is-not-a-keyword"><code>let</code> is not a keyword<a class="hash-link" href="#let-is-not-a-keyword" title="Direct link to heading">​</a></h2><p>you need about a dozen checks to make sure you are on a let declaration ...</p><h2 class="anchor anchorWithStickyNavbar_S230" id="for-of">For-of<a class="hash-link" href="#for-of" title="Direct link to heading">​</a></h2><p><code>for (let in ...)</code>
<code>for (async of ..)</code></p><h3 class="anchor anchorWithStickyNavbar_S230" id="b32-block-level-function-declarations-web-legacy-compatibility-semantics">B.3.2 Block-Level Function Declarations Web Legacy Compatibility Semantics<a class="hash-link" href="#b32-block-level-function-declarations-web-legacy-compatibility-semantics" title="Direct link to heading">​</a></h3><p><a href="https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics" target="_blank" rel="noopener noreferrer">B.3.2 Block-Level Function Declarations Web Legacy Compatibility Semantics</a></p><h2 class="anchor anchorWithStickyNavbar_S230" id="ambiguous-grammar">Ambiguous Grammar<a class="hash-link" href="#ambiguous-grammar" title="Direct link to heading">​</a></h2><p><code>/</code> slash and <code>/=</code> regex</p><h2 class="anchor anchorWithStickyNavbar_S230" id="grammar-context">Grammar Context<a class="hash-link" href="#grammar-context" title="Direct link to heading">​</a></h2><p>yield ... await ...</p><h2 class="anchor anchorWithStickyNavbar_S230" id="cover-grammar">Cover Grammar<a class="hash-link" href="#cover-grammar" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_S230" id="arrow-functions">Arrow functions<a class="hash-link" href="#arrow-functions" title="Direct link to heading">​</a></h3><h3 class="anchor anchorWithStickyNavbar_S230" id="object-patter-vs-object-binding">Object Patter vs Object binding<a class="hash-link" href="#object-patter-vs-object-binding" title="Direct link to heading">​</a></h3><h3 class="anchor anchorWithStickyNavbar_S230" id="assignment-target-pattern">Assignment target pattern<a class="hash-link" href="#assignment-target-pattern" title="Direct link to heading">​</a></h3>]]></content>
    </entry>
</feed>