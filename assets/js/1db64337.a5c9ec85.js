(self.webpackChunkjavascript_compiler_in_rust=self.webpackChunkjavascript_compiler_in_rust||[]).push([[372],{1535:(e,t,o)=>{"use strict";o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=o(2081),n=(o(9496),o(9613)),a=o(6954);const i={id:"overview",title:"Overview"},s=void 0,l={unversionedId:"overview",id:"overview",title:"Overview",description:"For our book, we will be applying the standard compiler frontend phases:",source:"@site/docs/overview.md",sourceDirName:".",slug:"/overview",permalink:"/javascript-compiler-in-rust/docs/overview",draft:!1,editUrl:"https://github.com/Boshen/javascript-compiler-in-rust/tree/main/docs/docs/overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/javascript-compiler-in-rust/docs/intro"},next:{title:"Lexer",permalink:"/javascript-compiler-in-rust/docs/lexer"}},c={},u=[{value:"Performance",id:"performance",level:2},{value:"Rust Source Code",id:"rust-source-code",level:2}],p={toc:u};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"For our book, we will be applying the standard compiler frontend phases:"),(0,n.kt)(a.Mermaid,{config:{},chart:"flowchart LR;\n    id[Source Text] --\x3e Token --\x3e Lexer --\x3e Parser --\x3e AST",mdxType:"Mermaid"}),(0,n.kt)("p",null,"Writing a JavaScript parser is fairly easy,\nit is 10% architectural decisions and 90% hard work on the fine-grained details."),(0,n.kt)("p",null,"The architectural decisions will mostly affect two categories:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the performance of our compiler"),(0,n.kt)("li",{parentName:"ul"},"how nice it is to consume our AST")),(0,n.kt)("p",null,"Knowing all the options and trade-offs before building a compiler in Rust will make our whole journey much smoother."),(0,n.kt)("h2",{id:"performance"},"Performance"),(0,n.kt)("p",null,"The key to a performant Rust program is to ",(0,n.kt)("strong",{parentName:"p"},"allocate less memory")," and ",(0,n.kt)("strong",{parentName:"p"},"use fewer CPU cycles"),"."),(0,n.kt)("p",null,"It is mostly transparent where memory allocations are made just by looking for heap-allocated objects such as a ",(0,n.kt)("inlineCode",{parentName:"p"},"Vec"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Box")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"String"),".\nReasoning about their usage will give us a sense of how fast our program will be - the more we allocate, the slower our program will be."),(0,n.kt)("p",null,"Rust gives us the power of zero-cost, we don't need to worry too much about abstractions causing slower performance.\nBe careful with our algorithmic complexities and we will be all good to go."),(0,n.kt)("h2",{id:"rust-source-code"},"Rust Source Code"),(0,n.kt)("p",null,'Whenever the performance of an API cannot be deduced,\ndo not be afraid to click the "source" button on the Rust documentation and read the source code,\nthey are easy to understand most of the time.'),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"When navigating the source code, searching for a definition is simply looking for\n",(0,n.kt)("inlineCode",{parentName:"p"},"fn function_name"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"struct struct_name"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"enum enum_name")," etc.\nThis is one advantage of having constant grammar in Rust (compared to JavaScript \ud83d\ude09).")))}d.isMDXComponent=!0},4749:(e,t,o)=>{var r={"./locale":2724,"./locale.js":2724};function n(e){var t=a(e);return o(t)}function a(e){if(!o.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}n.keys=function(){return Object.keys(r)},n.resolve=a,e.exports=n,n.id=4749}}]);