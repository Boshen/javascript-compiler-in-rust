(self.webpackChunkjavascript_compiler_in_rust=self.webpackChunkjavascript_compiler_in_rust||[]).push([[927],{1298:(e,t,r)=>{"use strict";r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>n,metadata:()=>s,toc:()=>u});var o=r(2081),i=(r(9496),r(9613)),a=r(9073);const n={id:"architecture",title:"Architecture Overview"},c=void 0,s={unversionedId:"architecture",id:"architecture",title:"Architecture Overview",description:"For our book, we will be applying the standard compiler frontend phases:",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/javascript-compiler-in-rust/docs/architecture",draft:!1,editUrl:"https://github.com/Boshen/javascript-compiler-in-rust/tree/main/docs/docs/architecture.md",tags:[],version:"current",frontMatter:{id:"architecture",title:"Architecture Overview"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/javascript-compiler-in-rust/docs/intro"},next:{title:"Lexer",permalink:"/javascript-compiler-in-rust/docs/lexer"}},l={},u=[{value:"Performance",id:"performance",level:2}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"For our book, we will be applying the standard compiler frontend phases:"),(0,i.kt)(a.Mermaid,{config:{},chart:"flowchart LR;\n    id[Source Text] --\x3e Token --\x3e Lexer --\x3e Parser --\x3e AST",mdxType:"Mermaid"}),(0,i.kt)("p",null,"Writing a JavaScript parser is fairly easy,\nit is 10% architectural decisions and 90% hard work on the fine-grained details."),(0,i.kt)("p",null,"The architectural decisions will mostly affect two categories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the performance of your compiler"),(0,i.kt)("li",{parentName:"ul"},"how nice it is to consume your AST")),(0,i.kt)("h2",{id:"performance"},"Performance"),(0,i.kt)("p",null,"The key to a performant Rust program is to ",(0,i.kt)("strong",{parentName:"p"},"make less memory allocations")," and ",(0,i.kt)("strong",{parentName:"p"},"use fewer CPU cycles"),"."),(0,i.kt)("p",null,"It is mostly transparent when a memory allocation is made just by looking for heap-allocated structs such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Box"),".\nReasoning about their usage will give you a sense of how fast your program will be."),(0,i.kt)("p",null,"With zero-cost abstraction, we don't need to worry too much about abstractions causing slower performance.\nBe careful with your algorithmic complexities and you will be all good to go."))}d.isMDXComponent=!0},1965:(e,t,r)=>{var o={"./locale":2642,"./locale.js":2642};function i(e){var t=a(e);return r(t)}function a(e){if(!r.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=1965}}]);