"use strict";(self.webpackChunkjavascript_compiler_in_rust=self.webpackChunkjavascript_compiler_in_rust||[]).push([[348],{9613:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>f});var t=r(9496);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},773:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(2081),a=(r(9496),r(9613));const o={id:"parser",title:"Parser"},i=void 0,s={unversionedId:"parser",id:"parser",title:"Parser",description:"The parser we are going to construct is called a recursive descent parser,",source:"@site/docs/parser.md",sourceDirName:".",slug:"/parser",permalink:"/javascript-compiler-in-rust/docs/parser",draft:!1,editUrl:"https://github.com/Boshen/javascript-compiler-in-rust/tree/main/docs/docs/parser.md",tags:[],version:"current",frontMatter:{id:"parser",title:"Parser"},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax Tree",permalink:"/javascript-compiler-in-rust/docs/ast"},next:{title:"Semantic Analysis",permalink:"/javascript-compiler-in-rust/docs/semantics_analysis"}},l={},c=[{value:"Helper functions",id:"helper-functions",level:2},{value:"Parse Functions",id:"parse-functions",level:2},{value:"Dealing with errors",id:"dealing-with-errors",level:2},{value:"JavaScript",id:"javascript",level:2},{value:"Binding Identifier vs Identifier Reference",id:"binding-identifier-vs-identifier-reference",level:3},{value:"Rust Optimizations",id:"rust-optimizations",level:2}],u={toc:c};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The parser we are going to construct is called a recursive descent parser,\nit is a manual process of going down the grammar and building up the AST."),(0,a.kt)("p",null,"The parser starts simple."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Parser<'a> {\n    /// Source Code\n    source: &'a str,\n\n    lexer: Lexer<'a>,\n\n    /// Current Token\n    cur_token: Token,\n\n    /// The end range of the previous token\n    prev_node_end: usize,\n}\n\nimpl<'a> Parser<'a> {\n    pub fn new(source: &'a str) -> Self {\n        Self {\n            source,\n            lexer: Lexer::new(source),\n            cur_token: Token::default(),\n        }\n    }\n\n    pub fn parse(&mut self) -> Program<'a> {\n        Ok(Program {\n            node: Node {\n                start: 0,\n                end: self.source.len(),\n            }\n            body: vec![]\n        })\n    }\n}\n")),(0,a.kt)("h2",{id:"helper-functions"},"Helper functions"),(0,a.kt)("p",null,"The current token ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_token: Token")," holds the current token returned from the lexer.\nWe'll make the parser code cleaner by adding some helper functions for navigating and inspecting the token."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl<'a> Parser<'a> {\n    fn start_node(&self) -> Node {\n        let token = self.cur_token();\n        Node::new(token.start, 0)\n    }\n\n    fn finish_node(&self, node: Node) -> Node {\n        Node::new(node.start, self.prev_node_end)\n    }\n\n    fn cur_token(&self) -> &Token {\n        &self.cur_token\n    }\n\n    fn cur_kind(&self) -> Kind {\n        self.cur_token.kind\n    }\n\n    /// Checks if the current index has token `Kind`\n    fn at(&self, kind: Kind) -> bool {\n        self.cur_kind() == kind\n    }\n\n    /// Advance and return true if we are at `Kind`\n    fn bump(&mut self, kind: Kind) {\n        if self.at(kind) {\n            self.advance();\n        }\n    }\n\n    /// Advance any token\n    fn bump_any(&mut self) {\n        self.advance();\n    }\n\n    /// Advance and return true if we are at `Kind`, return false otherwise\n    fn eat(&mut self, kind: Kind) -> bool {\n        if self.at(kind) {\n            self.advance();\n            return true;\n        }\n        false\n    }\n\n    /// Move to the next token\n    fn advance(&mut self) {\n        let token = self.lexer.next_token();\n        self.prev_node_end = self.cur_token.end;\n        self.cur_token = token;\n    }\n}\n")),(0,a.kt)("h2",{id:"parse-functions"},"Parse Functions"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DebuggerStatement")," is the most simple statement to parse, so let's try and parse it and return a valid program"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl<'a> Parser<'a> {\n    pub fn parse(&mut self) -> Program {\n        // highlight-next-line\n        let stmt = self.parse_debugger_statement();\n        let body = vec![stmt];\n        Ok(Program {\n            node: Node {\n                start: 0,\n                end: self.source.len(),\n            }\n            body,\n        })\n    }\n\n    fn parse_debugger_statement(&mut self) -> Statement {\n        let node = self.start_node();\n        self.bump_any();\n        Statement::DebuggerStatement {\n            node: self.finish_node(node),\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"dealing-with-errors"},"Dealing with errors"),(0,a.kt)("p",null,"Quoting from the dragon book"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Most programming language specifications do not describe how a compiler should respond to errors; error handling is left to the compiler designer.\nPlanning the error handling right from the start can both simplify the structure of a compiler and improve its handling of errors.")),(0,a.kt)("p",null,"A fully recoverable parser can construct an AST no matter what you throw at it.\nfor tools such as linter or formatter, one would wish for a fully recoverable parser so you can act on part of the program."),(0,a.kt)("p",null,"::: info\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rome/tools"},"Rome")," parser is a fully recoverable parser, it will construct an AST no matter what you throw at it.\n:::"),(0,a.kt)("p",null,"A panicking parser will abort if there is any grammar mismatch, and a partially recoverable parser will recover from deterministic grammars."),(0,a.kt)("p",null,"For example, given a grammatically incorrect while statement ",(0,a.kt)("inlineCode",{parentName:"p"},"while true {}"),", we know it is missing round brackets,\nand the only punctuation it can have are round brackets, so we can still return a valid AST and indicate its missing brackets."),(0,a.kt)("p",null,"Most JavaScript parsers out there are partially recoverable, so we'll do the same and build a partially recoverable parser."),(0,a.kt)("h2",{id:"javascript"},"JavaScript"),(0,a.kt)("h3",{id:"binding-identifier-vs-identifier-reference"},"Binding Identifier vs Identifier Reference"),(0,a.kt)("h2",{id:"rust-optimizations"},"Rust Optimizations"))}p.isMDXComponent=!0}}]);