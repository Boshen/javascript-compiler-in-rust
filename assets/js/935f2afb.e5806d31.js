"use strict";(self.webpackChunkjavascript_compiler_in_rust=self.webpackChunkjavascript_compiler_in_rust||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/javascript-compiler-in-rust/docs/intro","docId":"intro"},{"type":"link","label":"Overview","href":"/javascript-compiler-in-rust/docs/overview","docId":"overview"},{"type":"link","label":"Lexer","href":"/javascript-compiler-in-rust/docs/lexer","docId":"lexer"},{"type":"link","label":"Abstract Syntax Tree","href":"/javascript-compiler-in-rust/docs/ast","docId":"ast"},{"type":"link","label":"Parser","href":"/javascript-compiler-in-rust/docs/parser","docId":"parser"},{"type":"link","label":"Dealing with Errors","href":"/javascript-compiler-in-rust/docs/errors","docId":"errors"},{"type":"link","label":"Semantic Analysis","href":"/javascript-compiler-in-rust/docs/semantics_analysis","docId":"semantics_analysis"},{"type":"link","label":"TypeScript","href":"/javascript-compiler-in-rust/docs/typescript","docId":"typescript"},{"type":"link","label":"References","href":"/javascript-compiler-in-rust/docs/references","docId":"references"}]},"docs":{"ast":{"id":"ast","title":"Abstract Syntax Tree","description":"The parser in the upcoming chapter is responsible for turning Tokens into an abstract syntax tree (AST).","sidebar":"tutorialSidebar"},"errors":{"id":"errors","title":"Dealing with Errors","description":"Quoting from the Dragon Book","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"We are in The Third Age of JavaScript,","sidebar":"tutorialSidebar"},"lexer":{"id":"lexer","title":"Lexer","description":"Token","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"Overview","description":"For our book, we will be applying the standard compiler frontend phases:","sidebar":"tutorialSidebar"},"parser":{"id":"parser","title":"Parser","description":"The parser we are going to construct is called a recursive descent parser,","sidebar":"tutorialSidebar"},"references":{"id":"references","title":"References","description":"Parsers written in Rust / Go","sidebar":"tutorialSidebar"},"semantics_analysis":{"id":"semantics_analysis","title":"Semantic Analysis","description":"Semantic analysis is the process of checking whether our source code is correct or not.","sidebar":"tutorialSidebar"},"typescript":{"id":"typescript","title":"TypeScript","description":"So you are done with JavaScript and you want to challenge parsing TypeScript?","sidebar":"tutorialSidebar"}}}')}}]);