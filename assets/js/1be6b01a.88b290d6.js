"use strict";(self.webpackChunkjavascript_parser_in_rust=self.webpackChunkjavascript_parser_in_rust||[]).push([[377],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(y,o(o({ref:t},c),{},{components:r})):n.createElement(y,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4919:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=r(2081),a=(r(9496),r(9613));const i={id:"typescript",title:"TypeScript"},o=void 0,p={unversionedId:"typescript",id:"typescript",title:"TypeScript",description:"So you are done with JavaScript and you want to challenge parsing TypeScript?",source:"@site/docs/typescript.md",sourceDirName:".",slug:"/typescript",permalink:"/javascript-parser-in-rust/docs/typescript",draft:!1,editUrl:"https://github.com/Boshen/javascript-parser-in-rust/tree/main/docs/docs/typescript.md",tags:[],version:"current",frontMatter:{id:"typescript",title:"TypeScript"},sidebar:"tutorialSidebar",previous:{title:"Semantic Analysis",permalink:"/javascript-parser-in-rust/docs/semantics_analysis"},next:{title:"References",permalink:"/javascript-parser-in-rust/docs/references"}},s={},l=[{value:"JSX vs TSX",id:"jsx-vs-tsx",level:2},{value:"Lookahead",id:"lookahead",level:2},{value:"TSIndexSignature",id:"tsindexsignature",level:3},{value:"Arrow Expressions",id:"arrow-expressions",level:3},{value:"TypeScript",id:"typescript",level:4},{value:"Rome",id:"rome",level:4},{value:"swc",id:"swc",level:4},{value:"esbuild",id:"esbuild",level:4}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So you are done with JavaScript and you want to challenge parsing TypeScript?\nThe bad news is that there is no specification,\nbut the good news is that the TypeScript parser is in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/blob/main/src/compiler/parser.ts"},"a single file")," \ud83d\ude43."),(0,a.kt)("h2",{id:"jsx-vs-tsx"},"JSX vs TSX"),(0,a.kt)("p",null,"For the following code,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"let foo = <string> bar;\n")),(0,a.kt)("p",null,"It is a syntax error if this is ",(0,a.kt)("inlineCode",{parentName:"p"},"tsx"),' (Unterminated JSX),\nbut it is correct "VariableDeclaration" with ',(0,a.kt)("inlineCode",{parentName:"p"},"TSTypeAssertion"),"."),(0,a.kt)("h2",{id:"lookahead"},"Lookahead"),(0,a.kt)("p",null,"In certain places, the parser need to lookahead and peek more than one token to determine the correct grammar."),(0,a.kt)("h3",{id:"tsindexsignature"},"TSIndexSignature"),(0,a.kt)("p",null,"For example, to parse ",(0,a.kt)("inlineCode",{parentName:"p"},"TSIndexSignature"),", consider the following two cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type A = { readonly [a: number]: string }\n           ^__________________________^ TSIndexSignature\n\ntype B = { [a]: string }\n           ^_________^ TSPropertySignature\n")),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"type A")," on the first ",(0,a.kt)("inlineCode",{parentName:"p"},"{"),", we need to peek 5 tokens (",(0,a.kt)("inlineCode",{parentName:"p"},"readonly"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"["),", ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),") in order to make sure\nit is a ",(0,a.kt)("inlineCode",{parentName:"p"},"TSIndexSignature")," and not a ",(0,a.kt)("inlineCode",{parentName:"p"},"TSPropertySignature"),"."),(0,a.kt)("p",null,"To make this possible and efficient, the lexer requires a buffer for storing multiple tokens."),(0,a.kt)("h3",{id:"arrow-expressions"},"Arrow Expressions"),(0,a.kt)("p",null,"Discussed in ","[/blog/grammar#cover-grammar]",",\nwe need to convert from ",(0,a.kt)("inlineCode",{parentName:"p"},"Expression"),"s to ",(0,a.kt)("inlineCode",{parentName:"p"},"BindingPattern"),"s when the ",(0,a.kt)("inlineCode",{parentName:"p"},"=>")," token is found after a SequenceExpression."),(0,a.kt)("p",null,"But this approach does not work really well for TypeScript as each item inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"()")," can have TypeScript syntax, there are just too many cases to cover."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"<x>a, b as c, d!;\n(a?: b = {} as c!) => {};\n")),(0,a.kt)("p",null,"Different parsers take different approaches:"),(0,a.kt)("h4",{id:"typescript"},"TypeScript"),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h4",{id:"rome"},"Rome"),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h4",{id:"swc"},"swc"),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h4",{id:"esbuild"},"esbuild"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TODO")))}u.isMDXComponent=!0}}]);